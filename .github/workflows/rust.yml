name: Release Build

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"   # 纯数字版本号标签触发

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux x86_64 musl 静态链接
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          # Linux aarch64 musl 静态链接
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          # Windows x86_64 MSVC
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          # Windows aarch64 MSVC
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
          # macOS aarch64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin

    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      # For musl target, install musl-tools (linux only)
      - name: Install musl-tools (Linux musl only)
        if: startsWith(matrix.target, 'x86_64-unknown-linux-musl') || startsWith(matrix.target, 'aarch64-unknown-linux-musl')
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      # For cross compilation on Windows aarch64, might need setup — optional

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare release artifact
        run: |
          mkdir -p release
          BIN_NAME=rustmailer
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            BIN_NAME=rustmailer.exe
          fi
          cp target/${{ matrix.target }}/release/${BIN_NAME} release/

          # zip the binary
          zip -j release/rustmailer-${{ matrix.target }}.zip release/${BIN_NAME}

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: rustmailer-${{ matrix.target }}
          path: release/rustmailer-${{ matrix.target }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: release/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
